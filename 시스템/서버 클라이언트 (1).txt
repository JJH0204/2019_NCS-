호스트 서버
* 인터넷 ip 인터넷 주소에 의해 식별
데디케이티드 게임 서버
* 게임을 만든 회사에서 직접 서버를 제작
* 초대형 서버
* 플레이어가 서버를 띄우는 것은 기술적으로 법적으로 불가능
온라인 게임 서버
* 중간에서 관리해주는 매우 거대한 데디케이티드 서버


게임 서버
온라인 게임 클라이언트 - 입력과 렌더링을 담당 서버는 로직을 담당
서버의 전송 데이터 묶음 : 패킷


게임 클라이언트
* 서버에 접속할 수 있는 응용 프로그램
* 클라이언트는 서버에 서비스를 요청, 서버 처리 결과를 적절한 방식으로 표현
* 클라이언트는 출력을 담당


클라이언트에는 대부분 유저가 가지고 있어도 되는 데이터 ( UI, 그래픽, 퀘스트 텍스쳐)를 저장, 중요한 게임데이터 ( 아이템 데미지, 캐릭터 공격력)를 서버에 저장해둠


클라이언트>
Network : server와 상호 Data 전송을 통해, 어떠한 일을 요구하는 프로그램
Game: Game Play 를 위해서 필요한 파일들의 묶음


클라이언트 구조>
동일한 성격을 지닌 Folder를 분류
압축File?
동일한 성격의 파일의 수가 많거나, 한 폴더에 여러 개의 파일을 가졌을 경우 일정한 포멧의 확장자로 한 개의 파일로 압축한 파일


클라이언트 구조가 필요한 이유>
time :구조를 모르면 file 누락으로 인해 재 patch 가능성이 높아짐
team play: 서로 일을 조직적으로 처리 할 수 있음
technical: 문제 발생시 , 쉽게 문제점 파악과 해결이 가능


클라이언트 입력받기 -> 서버 로직처리 -> 게임로직 처리 -> 랜더링


클라이언트는 화려한 그래픽과 무거운 용량을 자랑


서버는 잘해야 본전




판단, 저장  : 서버 , 출력 : 클라이언트




기획자가 모든 부분을 판단?
ㄴ 프로그래머와 논의해서 작성




서버는 처리를 위해 있는 장치
DB 데이터의 집합 


서버의 병렬화


플로우차트
* 필요한 작업이나 사무처리의 순서를 통일된 기호와 도형을 사용해서 도식적으로 표시
* 다이어그램, 블록 다이어그램
* 진행 과정을 한눈에 볼 수 있을
플로우차트 실수
* 시작과 끝
* 처리 후에 어디로 연결되는 지
* 해당 시스템 이외의 항목이 포함x
* yes/no가 없이 연결 선만 있음